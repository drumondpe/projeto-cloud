AWSTemplateFormatVersion: '2010-09-09'
Description: Template estendido com EC2 Auto Scaling, ALB e Dynamo

Resources:
  # VPC principal da infraestrutura
  MinhaVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-MinhaVPC"

  # Internet Gateway para permitir acesso à Internet
  MeuInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-MeuInternetGateway"

  # Anexando o Internet Gateway à VPC
  AnexoGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MinhaVPC
      InternetGatewayId: !Ref MeuInternetGateway

  # Subnet pública na primeira zona de disponibilidade
  SubnetPublica1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MinhaVPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: sa-east-1a
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-SubnetPublica1"

  # Subnet pública na segunda zona de disponibilidade
  SubnetPublica2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MinhaVPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: sa-east-1b
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-SubnetPublica2"

  # Subnet privada para instâncias EC2
  SubnetPrivada:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MinhaVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: sa-east-1a
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-SubnetPrivada"

  # Tabela de rotas públicas
  TabelaRoteamentoPublico:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MinhaVPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-TabelaRoteamentoPublico"

  # Rota pública para Internet
  RotaPublica:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref TabelaRoteamentoPublico
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MeuInternetGateway

  # Associação da tabela de rotas com a primeira subnet pública
  AssociacaoRotaSubnet1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPublica1
      RouteTableId: !Ref TabelaRoteamentoPublico

  # Associação da tabela de rotas com a segunda subnet pública
  AssociacaoRotaSubnet2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPublica2
      RouteTableId: !Ref TabelaRoteamentoPublico

  # Grupo de segurança para permitir acesso SSH e HTTP
  GrupoSeguranca:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Permitir SSH e HTTP
      VpcId: !Ref MinhaVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-GrupoSeguranca"

  # Grupo de segurança para o ALB
  GrupoSegurancaALB:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Permitir HTTP e HTTPS para o ALB
      VpcId: !Ref MinhaVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-GrupoSegurancaALB"

  # Application Load Balancer para distribuir o tráfego
  MeuALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${AWS::StackName}-MeuALB"
      Subnets:
        - !Ref SubnetPublica1
        - !Ref SubnetPublica2
      SecurityGroups:
        - !Ref GrupoSegurancaALB
      Scheme: internet-facing
      Type: application
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-MeuALB"

  # Listener do ALB para encaminhar tráfego
  ListenerALB:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref MeuTargetGroupApp
      LoadBalancerArn: !Ref MeuALB
      Port: 80
      Protocol: HTTP

  # Target group para o ALB
  MeuTargetGroupApp:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref MinhaVPC
      Protocol: HTTP
      Port: 5000
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3

  # Configuração de lançamento para Auto Scaling
  ConfiguracaoLancamento:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: ami-04716897be83e3f04
      InstanceType: t2.medium
      KeyName: acesso-gomes
      SecurityGroups:
        - Ref: GrupoSeguranca
      IamInstanceProfile: !Ref PerfilInstanciaEC2
      UserData: 
        Fn::Base64: |
          #!/bin/bash
          exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
          set -x

          # Atualizar e instalar dependências
          sudo apt-get update -y
          sudo apt-get upgrade -y
          sudo apt-get install -y python3-pip git

          echo "export STACK_NAME=${AWS::StackName}" | sudo tee -a /etc/profile.d/stackname.sh
          source /etc/profile.d/stackname.sh
          
          # Clonar o repositório do GitHub
          git clone https://github.com/drumondpe/projeto-cloud.git /home/ubuntu/projeto-cloud

          # Entrar no diretório clonado
          cd /home/ubuntu/projeto-cloud

          # Instalar dependências do Python
          pip3 install -r requirements.txt --break-system-packages

          # Executar a aplicação
          python3 app.py

  # Grupo de Auto Scaling para gerenciar instâncias EC2
  GrupoAutoScaling:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - Ref: SubnetPublica1
        - Ref: SubnetPublica2
      LaunchConfigurationName:
        Ref: ConfiguracaoLancamento
      MinSize: '3'
      MaxSize: '4'
      TargetGroupARNs:
        - Ref: MeuTargetGroupApp
      HealthCheckGracePeriod: 300
      HealthCheckType: ELB
      MetricsCollection:
        - Granularity: "1Minute"
      Tags:
        - Key: Name
          Value: ASG-EC2-Instance
          PropagateAtLaunch: true

  # Política de escalação para aumentar a capacidade
  PoliticaAumento:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName:
        Ref: GrupoAutoScaling
      PolicyType: SimpleScaling
      AdjustmentType: ChangeInCapacity
      Cooldown: '300'
      ScalingAdjustment: '1'

  # Política de escalação para diminuir a capacidade
  PoliticaReducao:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName:
        Ref: GrupoAutoScaling
      PolicyType: SimpleScaling
      AdjustmentType: ChangeInCapacity
      Cooldown: '300'
      ScalingAdjustment: '-1'

  # Alarme de CPU alta para aumentar a capacidade
  AlarmeCpuAlta:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Alarme quando a CPU excede 70%"
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '300'
      EvaluationPeriods: '1'
      Threshold: '70'
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
        - Ref: PoliticaAumento
      Dimensions:
        - Name: AutoScalingGroupName
          Value: 
            Ref: GrupoAutoScaling

  # Alarme de CPU baixa para reduzir a capacidade
  AlarmeCpuBaixa:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Alarme quando a CPU cai abaixo de 30%"
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '300'
      EvaluationPeriods: '1'
      Threshold: '30'
      ComparisonOperator: LessThanOrEqualToThreshold
      AlarmActions:
        - Ref: PoliticaReducao
      Dimensions:
        - Name: AutoScalingGroupName
          Value: 
            Ref: GrupoAutoScaling

  # Instância EC2 com perfil IAM e acesso SSH
  MinhaInstanciaEC2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-04716897be83e3f04
      InstanceType: t2.medium
      KeyName: acesso-gomes
      SecurityGroupIds:
        - !Ref GrupoSeguranca
      SubnetId: !Ref SubnetPrivada
      IamInstanceProfile: !Ref PerfilInstanciaEC2
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-MinhaInstanciaEC2"

  # Tabela DynamoDB para armazenar dados da aplicação
  TabelaDynamoDB:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-DadosAplicacao"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: "Id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "Id"
          KeyType: "HASH"

  # Perfil de instância EC2 com role IAM
  PerfilInstanciaEC2:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles: [!Ref RoleEC2]

  # Role IAM para instâncias EC2 com permissões de acesso ao DynamoDB
  RoleEC2:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: PermissaoDynamoDB
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:BatchGetItem
                  - dynamodb:BatchWriteItem
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:Scan
                  - dynamodb:Query
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                Resource: !GetAtt TabelaDynamoDB.Arn

  # Endpoint para acessar o DynamoDB
  EndpointDynamoDB:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref MinhaVPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.dynamodb'
      VpcEndpointType: Gateway
      RouteTableIds:
        - !Ref TabelaRoteamentoPublico
